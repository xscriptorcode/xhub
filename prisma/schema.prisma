// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ============================================================
// XHUB SCHEMA - Based on SQL migrations
// ============================================================

model User {
  id           Int      @id @default(autoincrement())
  uuid         String   @unique @db.Char(36)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  fullName     String?  @map("full_name") @db.VarChar(255)
  username     String?  @unique @db.VarChar(100)
  avatarUrl    String?  @map("avatar_url") @db.Text
  bio          String?  @db.Text
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  userRoles   UserRole[]
  projects    Project[]
  files       File[]
  activityLog ActivityLog[]

  @@map("users")
  @@index([email])
  @@index([username])
  @@index([uuid])
  @@index([isActive])
}

model Role {
  id          Int      @id @default(autoincrement())
  roleName    String   @unique @map("role_name") @db.VarChar(50)
  description String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  userRoles UserRole[]

  @@map("roles")
  @@index([roleName])
}

model UserRole {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  roleId     Int      @map("role_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
  @@index([userId])
  @@index([roleId])
}

model Project {
  id          Int               @id @default(autoincrement())
  userId      Int               @map("user_id")
  name        String            @db.VarChar(255)
  description String?           @db.Text
  visibility  ProjectVisibility @default(private)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @updatedAt @map("updated_at")

  // Relations
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       File[]
  activityLog ActivityLog[]

  @@map("projects")
  @@index([userId])
  @@index([visibility])
  @@index([name])
}

model File {
  id         Int      @id @default(autoincrement())
  projectId  Int      @map("project_id")
  userId     Int      @map("user_id")
  filename   String   @db.VarChar(255)
  filepath   String   @db.Text
  mimetype   String?  @db.VarChar(100)
  size       BigInt?
  version    Int      @default(1)
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  // Relations
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityLog ActivityLog[]

  @@map("files")
  @@index([projectId])
  @@index([userId])
  @@index([filename])
  @@index([version])
  @@index([uploadedAt])
}

model ActivityLog {
  id        Int            @id @default(autoincrement())
  userId    Int            @map("user_id")
  projectId Int?           @map("project_id")
  fileId    Int?           @map("file_id")
  action    ActivityAction
  details   String?        @db.Text
  createdAt DateTime       @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  file    File?    @relation(fields: [fileId], references: [id], onDelete: SetNull)

  @@map("activity_log")
  @@index([userId])
  @@index([projectId])
  @@index([fileId])
  @@index([action])
  @@index([createdAt])
}

// ============================================================
// ENUMS
// ============================================================

enum ProjectVisibility {
  public
  private

  @@map("project_visibility")
}

enum ActivityAction {
  upload
  download
  delete
  edit
  login
  logout
  create_project @map("create_project")
  update_project @map("update_project")
  delete_project @map("delete_project")

  @@map("activity_action")
}
